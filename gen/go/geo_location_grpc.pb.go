// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: geo_location.proto

package geo_location

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeoLocationService_GetGeoLocationByName_FullMethodName = "/geo_location.GeoLocationService/GetGeoLocationByName"
	GeoLocationService_CreateGeoLocation_FullMethodName    = "/geo_location.GeoLocationService/CreateGeoLocation"
	GeoLocationService_UpdateGeoLocation_FullMethodName    = "/geo_location.GeoLocationService/UpdateGeoLocation"
)

// GeoLocationServiceClient is the client API for GeoLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GeoLocationService provides operations for managing geo locations
type GeoLocationServiceClient interface {
	// GetGeoLocationByName retrieves a geo location by its name
	GetGeoLocationByName(ctx context.Context, in *GeoLocationRequest, opts ...grpc.CallOption) (*GeoLocationResponse, error)
	// CreateGeoLocation creates a new geo location
	CreateGeoLocation(ctx context.Context, in *CreateGeoLocationRequest, opts ...grpc.CallOption) (*GeoLocationResponse, error)
	// UpdateGeoLocation updates an existing geo location
	UpdateGeoLocation(ctx context.Context, in *UpdateGeoLocationRequest, opts ...grpc.CallOption) (*GeoLocationResponse, error)
}

type geoLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoLocationServiceClient(cc grpc.ClientConnInterface) GeoLocationServiceClient {
	return &geoLocationServiceClient{cc}
}

func (c *geoLocationServiceClient) GetGeoLocationByName(ctx context.Context, in *GeoLocationRequest, opts ...grpc.CallOption) (*GeoLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeoLocationResponse)
	err := c.cc.Invoke(ctx, GeoLocationService_GetGeoLocationByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoLocationServiceClient) CreateGeoLocation(ctx context.Context, in *CreateGeoLocationRequest, opts ...grpc.CallOption) (*GeoLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeoLocationResponse)
	err := c.cc.Invoke(ctx, GeoLocationService_CreateGeoLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoLocationServiceClient) UpdateGeoLocation(ctx context.Context, in *UpdateGeoLocationRequest, opts ...grpc.CallOption) (*GeoLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeoLocationResponse)
	err := c.cc.Invoke(ctx, GeoLocationService_UpdateGeoLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoLocationServiceServer is the server API for GeoLocationService service.
// All implementations must embed UnimplementedGeoLocationServiceServer
// for forward compatibility.
//
// GeoLocationService provides operations for managing geo locations
type GeoLocationServiceServer interface {
	// GetGeoLocationByName retrieves a geo location by its name
	GetGeoLocationByName(context.Context, *GeoLocationRequest) (*GeoLocationResponse, error)
	// CreateGeoLocation creates a new geo location
	CreateGeoLocation(context.Context, *CreateGeoLocationRequest) (*GeoLocationResponse, error)
	// UpdateGeoLocation updates an existing geo location
	UpdateGeoLocation(context.Context, *UpdateGeoLocationRequest) (*GeoLocationResponse, error)
	mustEmbedUnimplementedGeoLocationServiceServer()
}

// UnimplementedGeoLocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoLocationServiceServer struct{}

func (UnimplementedGeoLocationServiceServer) GetGeoLocationByName(context.Context, *GeoLocationRequest) (*GeoLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeoLocationByName not implemented")
}
func (UnimplementedGeoLocationServiceServer) CreateGeoLocation(context.Context, *CreateGeoLocationRequest) (*GeoLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeoLocation not implemented")
}
func (UnimplementedGeoLocationServiceServer) UpdateGeoLocation(context.Context, *UpdateGeoLocationRequest) (*GeoLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGeoLocation not implemented")
}
func (UnimplementedGeoLocationServiceServer) mustEmbedUnimplementedGeoLocationServiceServer() {}
func (UnimplementedGeoLocationServiceServer) testEmbeddedByValue()                            {}

// UnsafeGeoLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoLocationServiceServer will
// result in compilation errors.
type UnsafeGeoLocationServiceServer interface {
	mustEmbedUnimplementedGeoLocationServiceServer()
}

func RegisterGeoLocationServiceServer(s grpc.ServiceRegistrar, srv GeoLocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeoLocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeoLocationService_ServiceDesc, srv)
}

func _GeoLocationService_GetGeoLocationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoLocationServiceServer).GetGeoLocationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoLocationService_GetGeoLocationByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoLocationServiceServer).GetGeoLocationByName(ctx, req.(*GeoLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoLocationService_CreateGeoLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeoLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoLocationServiceServer).CreateGeoLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoLocationService_CreateGeoLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoLocationServiceServer).CreateGeoLocation(ctx, req.(*CreateGeoLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoLocationService_UpdateGeoLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGeoLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoLocationServiceServer).UpdateGeoLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoLocationService_UpdateGeoLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoLocationServiceServer).UpdateGeoLocation(ctx, req.(*UpdateGeoLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoLocationService_ServiceDesc is the grpc.ServiceDesc for GeoLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geo_location.GeoLocationService",
	HandlerType: (*GeoLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGeoLocationByName",
			Handler:    _GeoLocationService_GetGeoLocationByName_Handler,
		},
		{
			MethodName: "CreateGeoLocation",
			Handler:    _GeoLocationService_CreateGeoLocation_Handler,
		},
		{
			MethodName: "UpdateGeoLocation",
			Handler:    _GeoLocationService_UpdateGeoLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo_location.proto",
}
